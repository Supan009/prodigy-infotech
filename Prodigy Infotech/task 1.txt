[10:42 am, 18/8/2024] Supan Gandhi ☕: import tensorflow as tf
import tensorflow_decision_forests as tfdf
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
[12:29 pm, 5/9/2024] Supan Gandhi ☕: import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
[12:30 pm, 5/9/2024] Supan Gandhi ☕: data = pd.read_csv
data.shape

Data: First Look
data
[12:31 pm, 5/9/2024] Supan Gandhi ☕: data.info()
[12:31 pm, 5/9/2024] Supan Gandhi ☕: data.dropna(inplace=True)
data.info()
[12:32 pm, 5/9/2024] Supan Gandhi ☕: from sklearn.model_selection import train_test_split

X = data.drop(['median_house_value'], axis=1)
y = data['median_house_value']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2)

train_data = X_train.join(y_train)
train_data
[12:33 pm, 5/9/2024] Supan Gandhi ☕: train_data.hist(figsize=(15,8))
[12:34 pm, 5/9/2024] Supan Gandhi ☕: temp_train_data = train_data.drop(['ocean_proximity'], axis=1)
plt.figure(figsize=(15,8))
sns.heatmap(temp_train_data.corr(), annot=True, cmap="YlGnBu")
plt.show()
[12:35 pm, 5/9/2024] Supan Gandhi ☕: train_data['total_rooms'] = np.log(train_data['total_rooms'] + 1)
train_data['total_bedrooms'] = np.log(train_data['total_bedrooms'] + 1)
train_data['population'] = np.log(train_data['population'] + 1)
train_data['households'] = np.log(train_data['households'] + 1)
train_data.hist(figsize=(15,8))
plt.show()
[12:35 pm, 5/9/2024] Supan Gandhi ☕: train_data.ocean_proximity.value_counts()
[12:36 pm, 5/9/2024] Supan Gandhi ☕: train_data = train_data.join(pd.get_dummies(train_data.ocean_proximity)).drop(['ocean_proximity'], axis=1)
train_data
[12:37 pm, 5/9/2024] Supan Gandhi ☕: plt.figure(figsize=(15,8))
sns.heatmap(train_data.corr(), annot=True, cmap="YlGnBu")
plt.show()
[12:39 pm, 5/9/2024] Supan Gandhi ☕: plt.figure(figsize=(15,8))
sns.scatterplot(x='latitude', y='longitude', data=train_data, hue='median_house_value', palette='coolwarm')

train_data['bedroom_ratio'] = train_data['total_bedrooms'] / train_data['total_rooms']
train_data['household_rooms'] = train_data['total_rooms'] / train_data['households']
plt.figure(figsize=(15,8))
sns.heatmap(train_data.corr(), annot=True, cmap="YlGnBu")
plt.show()


from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import StandardScaler

scaler =StandardScaler()

reg = LinearRegression()

reg.fit(X_train_s, y_train)

test_data = X_test.join(y_test)

test_data['total_rooms'] = np.log(test_data['total_rooms'] + 1)
test_data['total_bedrooms'] = np.log(test_data['total_bedrooms'] + 1)
[12:39 pm, 5/9/2024] Supan Gandhi ☕: test_data = test_data.join(pd.get_dummies(test_data.ocean_proximity)).drop(['ocean_proximity'], axis=1)

test_data['bedroom_ratio'] = test_data['total_bedrooms'] / test_data['total_rooms']
test_data['household_rooms'] = test_data['total_rooms'] / test_data['households']



X_train, y_train = train_data.drop(['median_house_value'], axis=1), train_data['median_house_value']
X_train_s = scaler.fit_transform(X_train)
[12:43 pm, 5/9/2024] Supan Gandhi ☕: X_test, y_test = test_data.drop(['median_house_value'], axis=1), test_data['median_house_value']
X_test_s = scaler.transform(X_test)

reg.score(X_test_s, y_test)